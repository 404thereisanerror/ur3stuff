 Program
   Robot Program
     'adapted from: https://gitlab.rlp.net/kitegg/public/kisd/mqtt-ur3-bridge/-/blob/main/src/urscript/auto-backup/mqtt-ur3-bridge/mqtt-ur3-bridge-main.txt'
     def set_entry(q,i,v):
       r≔0
       Loop
         If r≟i:
           q[i]≔v
           return
         r≔r+1
       end
     end
     targetPose≔p[0.0,0.0,0.0,0.0,0.0,0.0]
     targetJoints≔[0.0,0.0,0.0,0.0,0.0,0.0]
     vel≔0.0
     acc≔0.0
     blend≔0.0
     time≔0.0
     cmd_queue≔[]
     val_queue≔[]
     arg_queue≔[]
     q_length≔0
     MoveJ
     'relative movement of 0mm to circumvent ISO norm.'
       relative_start
     'MoveJ'
     Loop
       'extract next command and args from queues'
       next_cmd≔""
       next_args≔[]
       next_joints≔[0.0,0.0,0.0,0.0,0.0,0.0]
       next_pose≔p[0.0,0.0,0.0,0.0,0.0,0.0]
       q_length≔get_list_length(cmd_queue)
       tmp_cmd_queue≔[]
       tmp_val_queue≔[]
       tmp_arg_queue≔[]
       If q_length>0:
         'first element of queue is the next command'
         next_cmd≔cmd_queue[0]
         next_val≔val_queue[0]
         If cmd≟"movejPose"
           next_pose≔arg_queue[0]
         ElseIf cmd≟"movejJoints"
           next_joints≔arg_queue[0]
         Else
           next_args≔arg_queue[0]
         a≔1
         while a<q_length:
           'add all elements but the first to the queue'
           set_entry(tmp_cmd_queue,a-1,cmd_queue[a])
           set_entry(tmp_val_queue,a-1,val_queue[a])
           set_entry(tmp_arg_queue,a-1,arg_queue[a])
           a≔a+1
         end
         'update the queue'
         cmd_queue≔tmp_cmd_queue
         val_queue≔tmp_val_queue
         arg_queue≔tmp_arg_queue
 
       If next_cmd≟"movePos":
         position=to_num(next_val)
         isMoving≔True
         Switch position
           Case 0
             MoveJ
               Waypoint_1
           Case 1
             MoveJ
               Waypoint_4
           Case 2
             MoveJ
               Waypoint_5
           Case 3
             MoveJ
               Waypoint_3
           Case 5
             MoveJ
               Waypoint_5
         isMoving≔False
       ElseIf next_cmd≟"movejJoints" or next_cmd≟"movejPose":
         'trigger movej. arg defines if blend / time is used'
         If next_cmd≟"movejJoints"
           If next_val≟"nA":
             movej(next_joints,acc,vel,0,0)
           If next_val≟"blend"
             movej(next_joints,acc,vel,0,blend)
           If next_val≟"time"
             movej(next_joints,1,1,time,0)
           If next_val≟"time,blend" or val≟"blend,time"
             movej(next_joints,1,1,time,blend)
         If cmd≟"movejPose"
           If next_val≟"nA"
             movej(next_pose,acc,vel,0,0)
           If next_val≟"blend"
             movej(next_pose,acc,vel,0,blend)
           If next_val≟"time"
             movej(next_pose,1,1,time,0)
           If next_val≟"time,blend" or val≟"blend,time"
             movej(next_pose,1,1,time,blend)
       ElseIf next_cmd≟"stopj"
         'doesnt work yet, because movej is blocking'
         'If val≠"nA"'
         'If val≟"nA"'
       ElseIf next_cmd≟"getPose"
         actualPose=get_actual_tcp_pose()
         socket_send_line(str_cat("returnValues:pose:",to_str(actualPose)),"rpi")
         cmd≔"nA"
       ElseIf next_cmd≟"getJoints"
         actualJoints=get_actual_joint_positions()
         socket_send_line(str_cat("returnValues:joints:",to_str(actualJoints)),"rpi")
         cmd≔"nA"
       'Comment'
       Wait: 0.001
   Thread_2
     'THREAD for internal socket coonection (speed)'
     isSpeedSockOpen≔ False
     isSpeedSockOpen=socket_open("127.0.0.1",30002,"sps")
     Loop
       If stop_mov≠stop_mov_last
         stop_mov≔stop_mov*-1
         speed≔"1"
         If stop_mov≟ True
           speed≔"0.1"
         socket_send_string("set speed","sps")
         socket_send_string(speed,"sps")
         socket_send_byte(10,"sps")
         stop_mov_last≔stop_mov
   Thread_1
     'THREAD for socket coonection to RPI'
     timer_socket: Start
     timer_lastRpiOn: Start
     isRpiSocketOpen≔ False
     isRpiOn≔ False
     Loop
       If isRpiSocketOpen≟ False
         socket_close(socket_name="rpi")
         Wait: 0.5
         isRpiSocketOpen≔socket_open("10.3.3.1",30001,"rpi")
         If isRpiSocketOpen≟ True
           timer_socket: Reset
           socket_send_string("ur3Online","rpi")
           ''close "connection lost" popup by internal socket (only way)''
           'socket_open("127.0.0.1",29999, "pop")'
           'socket_send_line("close popup","pop")'
           'socket_close("pop")'
         Else
           Wait: 2.0
       Else
         'IF Rpi Socket is open:'
         If timer_socket>2
           'send status msg to rpi evey 2s'
           socket_send_string("ur3Online","rpi")
           timer_socket: Reset
         incoming_buff≔socket_read_line("rpi")
         If incoming_buff≠""
           If incoming_buff≟"rpiOnline"
             isRpiOn≔ True
             timer_lastRpiOn: Reset
           Else
             colPos≔str_find(incoming_buff,":")
             socket_send_line(str_cat("cmdReceived:",incoming_buff),"rpi")
             If colPos≥0
               cmd≔str_sub(incoming_buff,0,colPos)
               val≔str_sub(incoming_buff,colPos+1,str_len(incoming_buff))
               If val≟""
                 val≔"nA"
               If cmd≟"pause"
                 stop_mov≔ True
               If cmd≟"continue"
                 stop_mov≔ False
             If colPos≟-1
               cmd≔incoming_buff
               val≔"nA"
         If timer_lastRpiOn>10
           isRpiOn≔ False
           isRpiSocketOpen≔ False
           socket_close(socket_name="rpi")
           'popup("Lost connection to MQTT Bridge (Raspberry Pi). Trying to reconnect", title ="Connection Lost", blocking = False)'
       Wait: 0.001
   Thread_3
     Loop
       If cmd≟"x"
         targetPose[0]=to_num(val)
       ElseIf cmd≟"y"
         targetPose[1]=to_num(val)
       ElseIf cmd≟"z"
         targetPose[2]=to_num(val)
       ElseIf cmd≟"ax"
         targetPose[3]=to_num(val)
       ElseIf cmd≟"ay"
         targetPose[4]=to_num(val)
       ElseIf cmd≟"az"
         targetPose[5]=to_num(val)
       ElseIf cmd≟"j1"
         targetJoints[0]=to_num(val)
       ElseIf cmd≟"j2"
         targetJoints[1]=to_num(val)
       ElseIf cmd≟"j3"
         targetJoints[2]=to_num(val)
       ElseIf cmd≟"j4"
         targetJoints[3]=to_num(val)
       ElseIf cmd≟"j5"
         targetJoints[4]=to_num(val)
       ElseIf cmd≟"j6"
         targetJoints[5]=to_num(val)
       ElseIf cmd≟"vel"
         vel=to_num(val)
       ElseIf cmd≟"acc"
         acc=to_num(val)
       ElseIf cmd≟"time"
         time=to_num(val)
       ElseIf cmd≟"blend"
         blend=to_num(val)
       ElseIf cmd≟"danceL"
         danceL=to_num(val)
       ElseIf cmd≟"danceR"
         danceR=to_num(val)
       ElseIf cmd≟"gain"
         gain=to_num(val)
       ElseIf cmd≟"movejPose":
         set_entry(cmd_queue,q_length,cmd)
         set_entry(val_queue,q_length,val)
         set_entry(arg_queue,q_length,targetPose)
         q_length≔get_list_length(cmd_queue)
       ElseIf cmd≟"movejJoints":
         set_entry(cmd_queue,q_length,cmd)
         set_entry(val_queue,q_length,val)
         set_entry(arg_queue,q_length,targetJoints)
         q_length≔get_list_length(cmd_queue)
       Wait: 0.001
